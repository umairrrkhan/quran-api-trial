{"ast":null,"code":"import * as React from 'react';\n\n/**\n * Taken from https://github.com/radix-ui/primitives/blob/main/packages/react/compose-refs/src/compose-refs.tsx\n */\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction setRef(ref, value) {\n  if (typeof ref === \"function\") {\n    return ref(value);\n  } else if (ref !== null && ref !== undefined) {\n    ref.current = value;\n  }\n}\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction composeRefs() {\n  for (var _len = arguments.length, refs = new Array(_len), _key = 0; _key < _len; _key++) {\n    refs[_key] = arguments[_key];\n  }\n  return node => {\n    let hasCleanup = false;\n    const cleanups = refs.map(ref => {\n      const cleanup = setRef(ref, node);\n      if (!hasCleanup && typeof cleanup === \"function\") {\n        hasCleanup = true;\n      }\n      return cleanup;\n    });\n    // React <19 will log an error to the console if a callback ref returns a\n    // value. We don't use ref cleanups internally so this will only happen if a\n    // user's ref callback returns a value, which we only expect if they are\n    // using the cleanup functionality added in React 19.\n    if (hasCleanup) {\n      return () => {\n        for (let i = 0; i < cleanups.length; i++) {\n          const cleanup = cleanups[i];\n          if (typeof cleanup === \"function\") {\n            cleanup();\n          } else {\n            setRef(refs[i], null);\n          }\n        }\n      };\n    }\n  };\n}\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction useComposedRefs() {\n  for (var _len2 = arguments.length, refs = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n    refs[_key2] = arguments[_key2];\n  }\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  return React.useCallback(composeRefs(...refs), refs);\n}\nexport { useComposedRefs };","map":{"version":3,"names":["React","setRef","ref","value","undefined","current","composeRefs","_len","arguments","length","refs","Array","_key","node","hasCleanup","cleanups","map","cleanup","i","useComposedRefs","_len2","_key2","useCallback"],"sources":["D:/qu/quran-website/node_modules/framer-motion/dist/es/utils/use-composed-ref.mjs"],"sourcesContent":["import * as React from 'react';\n\n/**\n * Taken from https://github.com/radix-ui/primitives/blob/main/packages/react/compose-refs/src/compose-refs.tsx\n */\n/**\n * Set a given ref to a given value\n * This utility takes care of different types of refs: callback refs and RefObject(s)\n */\nfunction setRef(ref, value) {\n    if (typeof ref === \"function\") {\n        return ref(value);\n    }\n    else if (ref !== null && ref !== undefined) {\n        ref.current = value;\n    }\n}\n/**\n * A utility to compose multiple refs together\n * Accepts callback refs and RefObject(s)\n */\nfunction composeRefs(...refs) {\n    return (node) => {\n        let hasCleanup = false;\n        const cleanups = refs.map((ref) => {\n            const cleanup = setRef(ref, node);\n            if (!hasCleanup && typeof cleanup === \"function\") {\n                hasCleanup = true;\n            }\n            return cleanup;\n        });\n        // React <19 will log an error to the console if a callback ref returns a\n        // value. We don't use ref cleanups internally so this will only happen if a\n        // user's ref callback returns a value, which we only expect if they are\n        // using the cleanup functionality added in React 19.\n        if (hasCleanup) {\n            return () => {\n                for (let i = 0; i < cleanups.length; i++) {\n                    const cleanup = cleanups[i];\n                    if (typeof cleanup === \"function\") {\n                        cleanup();\n                    }\n                    else {\n                        setRef(refs[i], null);\n                    }\n                }\n            };\n        }\n    };\n}\n/**\n * A custom hook that composes multiple refs\n * Accepts callback refs and RefObject(s)\n */\nfunction useComposedRefs(...refs) {\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    return React.useCallback(composeRefs(...refs), refs);\n}\n\nexport { useComposedRefs };\n"],"mappings":"AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;;AAE9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAASC,MAAMA,CAACC,GAAG,EAAEC,KAAK,EAAE;EACxB,IAAI,OAAOD,GAAG,KAAK,UAAU,EAAE;IAC3B,OAAOA,GAAG,CAACC,KAAK,CAAC;EACrB,CAAC,MACI,IAAID,GAAG,KAAK,IAAI,IAAIA,GAAG,KAAKE,SAAS,EAAE;IACxCF,GAAG,CAACG,OAAO,GAAGF,KAAK;EACvB;AACJ;AACA;AACA;AACA;AACA;AACA,SAASG,WAAWA,CAAA,EAAU;EAAA,SAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,EAANC,IAAI,OAAAC,KAAA,CAAAJ,IAAA,GAAAK,IAAA,MAAAA,IAAA,GAAAL,IAAA,EAAAK,IAAA;IAAJF,IAAI,CAAAE,IAAA,IAAAJ,SAAA,CAAAI,IAAA;EAAA;EACxB,OAAQC,IAAI,IAAK;IACb,IAAIC,UAAU,GAAG,KAAK;IACtB,MAAMC,QAAQ,GAAGL,IAAI,CAACM,GAAG,CAAEd,GAAG,IAAK;MAC/B,MAAMe,OAAO,GAAGhB,MAAM,CAACC,GAAG,EAAEW,IAAI,CAAC;MACjC,IAAI,CAACC,UAAU,IAAI,OAAOG,OAAO,KAAK,UAAU,EAAE;QAC9CH,UAAU,GAAG,IAAI;MACrB;MACA,OAAOG,OAAO;IAClB,CAAC,CAAC;IACF;IACA;IACA;IACA;IACA,IAAIH,UAAU,EAAE;MACZ,OAAO,MAAM;QACT,KAAK,IAAII,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGH,QAAQ,CAACN,MAAM,EAAES,CAAC,EAAE,EAAE;UACtC,MAAMD,OAAO,GAAGF,QAAQ,CAACG,CAAC,CAAC;UAC3B,IAAI,OAAOD,OAAO,KAAK,UAAU,EAAE;YAC/BA,OAAO,CAAC,CAAC;UACb,CAAC,MACI;YACDhB,MAAM,CAACS,IAAI,CAACQ,CAAC,CAAC,EAAE,IAAI,CAAC;UACzB;QACJ;MACJ,CAAC;IACL;EACJ,CAAC;AACL;AACA;AACA;AACA;AACA;AACA,SAASC,eAAeA,CAAA,EAAU;EAAA,SAAAC,KAAA,GAAAZ,SAAA,CAAAC,MAAA,EAANC,IAAI,OAAAC,KAAA,CAAAS,KAAA,GAAAC,KAAA,MAAAA,KAAA,GAAAD,KAAA,EAAAC,KAAA;IAAJX,IAAI,CAAAW,KAAA,IAAAb,SAAA,CAAAa,KAAA;EAAA;EAC5B;EACA,OAAOrB,KAAK,CAACsB,WAAW,CAAChB,WAAW,CAAC,GAAGI,IAAI,CAAC,EAAEA,IAAI,CAAC;AACxD;AAEA,SAASS,eAAe","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}